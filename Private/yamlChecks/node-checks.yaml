checks:
  - ID: NODE001
    Name: Node Readiness and Conditions
    Section: Nodes
    Category: Nodes
    ResourceKind: Node
    Severity: High
    Weight: 8
    Description: Detects nodes that are not in Ready state or reporting other warning conditions.
    FailMessage: One or more nodes are not Ready.
    Recommendation:
      text: Investigate NotReady nodes to avoid workload disruption.
      html: |
        <div class="recommendation-content">
          <ul>
            <li>Use <code>kubectl describe node <name></code> to check conditions and taints.</li>
            <li>Check kubelet and container runtime status.</li>
            <li>Verify cluster networking and node resource pressure.</li>
          </ul>
        </div>
    URL: "https://kubernetes.io/docs/concepts/architecture/nodes/"
    Script: |
      param($KubeData)
      $nodes = $KubeData.Nodes.items
      $results = @()
      $notReadyCount = 0
  
      foreach ($node in $nodes) {
        $name = $node.metadata.name
        $conditions = $node.status.conditions
        $ready = $conditions | Where-Object { $_.type -eq "Ready" }
        $issues = $conditions | Where-Object { $_.type -ne "Ready" -and $_.status -ne "False" }
  
        if ($ready.status -eq "True") {
          $results += [pscustomobject]@{
            Node   = $name
            Status = "‚úÖ Healthy"
            Issues = "None"
          }
        } else {
          $msg = if ($issues) {
            ($issues | ForEach-Object { "$($_.type): $($_.message)" }) -join " | "
          } else {
            "Unknown Issue"
          }
          $results += [pscustomobject]@{
            Node   = $name
            Status = "‚ùå Not Ready"
            Issues = $msg
          }
          $notReadyCount++
        }
      }
  
      return @{
        Items = $results
        IssueCount = $notReadyCount
      }
  - ID: NODE002
    Name: Node Resource Pressure
    Section: Nodes
    Category: Nodes
    ResourceKind: Node
    Severity: Medium
    Weight: 6
    Description: Detects nodes under high CPU, memory, or disk pressure.
    FailMessage: One or more nodes are under high resource usage.
    Recommendation:
      text: Investigate and rebalance workloads on nodes with high resource usage.
      html: |
        <div class="recommendation-content">
          <ul>
            <li>Review node workloads with <code>kubectl top nodes</code>.</li>
            <li>Move resource-hungry pods to less loaded nodes.</li>
            <li>Scale node pool or optimize workloads if necessary.</li>
          </ul>
        </div>
    URL: "https://kubernetes.io/docs/tasks/debug/debug-cluster/resource-usage-monitoring/"
    Script: |
      param($KubeData, $Thresholds)
      $nodes = $KubeData.Nodes.items
      $top = $KubeData.TopNodes
      $results = @()
      $issueCount = 0
  
      # Use thresholds from Get-KubeBuddyThresholds
      $cpu_warn = $Thresholds.cpu_warning
      $cpu_crit = $Thresholds.cpu_critical
      $mem_warn = $Thresholds.mem_warning
      $mem_crit = $Thresholds.mem_critical
      # Disk thresholds are not provided by Get-KubeBuddyThresholds, so use hardcoded values
      $disk_warn = 60
      $disk_crit = 80
  
      foreach ($node in $nodes) {
        $name = $node.metadata.name
        $cpuAlloc = [int]($node.status.allocatable.cpu -replace "m", "")
        $memAlloc = [math]::Round(([int]($node.status.allocatable.memory -replace "Ki", "")) / 1024)
        $stat = $top | Where-Object { $_ -match "^$name\s" }
  
        # Default values if no stats available
        $cpuUsed = 0
        $cpuPct = 0
        $cpuStatus = "‚úÖ Normal"
        $memUsed = 0
        $memPct = 0
        $memStatus = "‚úÖ Normal"
        $diskPct = "<unknown>"
        $diskStatus = "‚ö†Ô∏è Unknown"
  
        if ($stat) {
          $split = $stat -split "\s+"
          $cpuUsed = [int]($split[1] -replace "m", "")
          $memUsed = [math]::Round([int]($split[3] -replace "Mi", ""))
  
          $cpuPct = [math]::Round(($cpuUsed / $cpuAlloc) * 100, 2)
          $memPct = [math]::Round(($memUsed / $memAlloc) * 100, 2)
  
          # CPU status
          if ($cpuPct -gt $cpu_crit) { $cpuStatus = "üî¥ Critical"; $issueCount++ }
          elseif ($cpuPct -gt $cpu_warn) { $cpuStatus = "üü° Warning"; $issueCount++ }
          else { $cpuStatus = "‚úÖ Normal" }
  
          # Memory status
          if ($memPct -gt $mem_crit) { $memStatus = "üî¥ Critical"; $issueCount++ }
          elseif ($memPct -gt $mem_warn) { $memStatus = "üü° Warning"; $issueCount++ }
          else { $memStatus = "‚úÖ Normal" }
  
          # Disk usage (if available)
          if ($split.Length -ge 5 -and $split[4] -match "^\d+%$") {
            $diskPct = [int]($split[4] -replace "%", "")
            if ($diskPct -gt $disk_crit) { $diskStatus = "üî¥ Critical"; $issueCount++ }
            elseif ($diskPct -gt $disk_warn) { $diskStatus = "üü° Warning"; $issueCount++ }
            else { $diskStatus = "‚úÖ Normal" }
            $diskPct = "$diskPct%"
          }
        }
  
        $results += [pscustomobject]@{
          Node        = $name
          "CPU Status"= $cpuStatus
          "CPU %"     = "$cpuPct%"
          "CPU Used"  = "$cpuUsed mC"
          "CPU Total" = "$cpuAlloc mC"
          "Mem Status"= $memStatus
          "Mem %"     = "$memPct%"
          "Mem Used"  = "$memUsed Mi"
          "Mem Total" = "$memAlloc Mi"
          "Disk %"    = $diskPct
          "Disk Status" = $diskStatus
        }
      }
  
      return @{
        Items = $results
        IssueCount = $issueCount
      }