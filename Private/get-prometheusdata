function Get-PrometheusData {
    param (
        [Parameter(Mandatory)]
        [string]$Query,

        [Parameter(Mandatory)]
        [string]$Url,  # Full Prometheus base URL (e.g., https://my.prometheus/api/v1)

        [string]$Mode = "local",  # local | basic | bearer | azure

        [string]$Username,
        [string]$Password,

        [string]$BearerTokenEnv,  # e.g., PROMETHEUS_TOKEN

        [switch]$UseRange,        # Optional: use range query
        [string]$StartTime,       # ISO8601 start time if using range
        [string]$EndTime,         # ISO8601 end time if using range
        [string]$Step = "5m"      # Range step
    )

    Write-Host "üì° Querying Prometheus ($Mode mode)..."

    $headers = @{}
    $authError = $null

    try {
        switch ($Mode.ToLower()) {
            "basic" {
                if (-not $Username -or -not $Password) {
                    throw "Username and Password must be provided for basic auth."
                }
                $headers["Authorization"] = "Basic " + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("${Username}:${Password}"))
            }

            "bearer" {
                if (-not $BearerTokenEnv) {
                    throw "Bearer token environment variable name must be provided."
                }
                $token = $Env:BearerTokenEnv
                if (-not $token) {
                    throw "Bearer token not found in environment variable: $BearerTokenEnv"
                }
                $headers["Authorization"] = "Bearer $token"
            }

            "azure" {
                Write-Host "üîê Authenticating with Azure..."

                if ($env:AZURE_CLIENT_ID -and $env:AZURE_CLIENT_SECRET -and $env:AZURE_TENANT_ID) {
                    $tokenUrl = "https://login.microsoftonline.com/$($env:AZURE_TENANT_ID)/oauth2/token"
                    $body = @{
                        grant_type    = "client_credentials"
                        client_id     = $env:AZURE_CLIENT_ID
                        client_secret = $env:AZURE_CLIENT_SECRET
                        resource      = "https://prometheus.monitor.azure.com/"
                    }
                    $tokenResponse = Invoke-RestMethod -Method POST -Uri $tokenUrl -Body $body
                    $headers["Authorization"] = "Bearer $($tokenResponse.access_token)"
                }
                else {
                    # Try az CLI
                    if (-not (Get-Command az -ErrorAction SilentlyContinue)) {
                        throw "Azure CLI not found, and SPN credentials not set."
                    }
                    $token = az account get-access-token --resource https://prometheus.monitor.azure.com --query accessToken -o tsv
                    if (-not $token) {
                        throw "Failed to obtain Azure access token via az CLI."
                    }
                    $headers["Authorization"] = "Bearer $token"
                }
            }

            "local" {
                # No auth needed
            }

            default {
                throw "Unsupported mode: $Mode"
            }
        }

        $encodedQuery = [uri]::EscapeDataString($Query)
        if ($UseRange -and $StartTime -and $EndTime) {
            $uri = "$Url/api/v1/query_range?query=$encodedQuery&start=$StartTime&end=$EndTime&step=$Step"
        }
        else {
            $uri = "$Url/api/v1/query?query=$encodedQuery"
        }

        $response = Invoke-RestMethod -Uri $uri -Headers $headers -TimeoutSec 10

        if ($response.status -ne "success") {
            throw "Query failed: $($response.error ?? 'Unknown error')"
        }

        return [PSCustomObject]@{
            Query   = $Query
            Mode    = $Mode
            Url     = $Url
            Results = $response.data.result
        }
    }
    catch {
        Write-Host "‚ùå Failed to query Prometheus: $_" -ForegroundColor Red
        return $null
    }
}
