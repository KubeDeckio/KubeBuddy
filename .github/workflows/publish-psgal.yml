name: Publish Module to PowerShell Gallery

on:
  push:
    tags:
      - 'v*'
  release:
    types:
      - published
  workflow_dispatch:

permissions:
  contents: write

jobs:
  publish:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Debug Tag
        run: |
          Write-Host "GITHUB_REF_NAME: $Env:GITHUB_REF_NAME"
          Write-Host "GITHUB_REF: $Env:GITHUB_REF"
        shell: pwsh

      - name: Set Module Version from Git Tag
        id: set_version
        run: |
          # If no GITHUB_REF_NAME, parse GITHUB_REF
          if (-not $Env:GITHUB_REF_NAME) {
            $tagVersion = $Env:GITHUB_REF -replace '^refs/tags/v',''
          }
          else {
            $tagVersion = $Env:GITHUB_REF_NAME -replace '^v',''
          }

          Write-Host "Setting module version to $tagVersion"

          # Update the PSD1 line: ModuleVersion = '0.0.4'
          (Get-Content ./KubeBuddy.psd1) `
            -replace '^\s*ModuleVersion\s*=\s*''.*''', "ModuleVersion = '$tagVersion'" |
            Set-Content ./KubeBuddy.psd1

          # Corrected update for kubebuddy.ps1 line: $moduleVersion = "v0.0.4"
          (Get-Content ./Public/kubebuddy.ps1) | 
          ForEach-Object { $_ -replace '^\s*\$moduleVersion\s*=\s*".*"', '$moduleVersion = "v' + $tagVersion + '"' } |
          Set-Content ./Public/kubebuddy.ps1

          Write-Host "Updated KubeBuddy.psd1 contents:"
          Get-Content ./KubeBuddy.psd1

          Write-Host "Updated kubebuddy.ps1 contents:"
          Get-Content ./Public/kubebuddy.ps1
        shell: pwsh


      - name: Run PSScriptAnalyzer and format output in Markdown
        run: |
          $results = Invoke-ScriptAnalyzer -Path ./ -Recurse -Severity 'Error', 'Warning' -ExcludeRule PSAvoidUsingWriteHost

          $warnings = $results | Where-Object { $_.Severity -eq 'Warning' }
          $errors = $results | Where-Object { $_.Severity -eq 'Error' }

          Write-Host "Found $($warnings.Count) warnings"
          Write-Host "Found $($errors.Count) errors"

          function ConvertTo-MarkdownTable {
            param ($items)
            $header = "| RuleName | Severity | ScriptName | Line | Message |"
            $separator = "| --- | --- | --- | --- | --- |"
            $rows = foreach ($item in $items) {
              "| $($item.RuleName) | $($item.Severity) | $($item.ScriptName) | $($item.Line) | $($item.Message) |"
            }
            "$header`n$separator`n$($rows -join "`n")"
          }

          if ($warnings.Count -gt 0) {
            $warningTable = ConvertTo-MarkdownTable -items $warnings
            Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "### PSScriptAnalyzer Warnings`n"
            Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "$warningTable`n"
          } else {
            Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "### No Warnings Found`n"
          }

          if ($errors.Count -gt 0) {
            $errorTable = ConvertTo-MarkdownTable -items $errors
            Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "### PSScriptAnalyzer Errors`n"
            Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "$errorTable`n"
          } else {
            Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "### No Errors Found`n"
          }

          if ($errors.Count -gt 0) {
            Write-Error "PSScriptAnalyzer found errors."
          }
        shell: pwsh

      - name: Validate PowerShell Module (loads correctly)
        run: |
          $manifest = Test-ModuleManifest -Path ./KubeBuddy.psd1
          Write-Host "Validated Module Version: $($manifest.Version)"
        shell: pwsh

      - name: Publish to PowerShell Gallery
        run: |
          Install-Module -Name PowerShellGet -Force -AllowClobber
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Publish-Module -Path ./ -NuGetApiKey $env:PSGALLERY_API_KEY -Repository PSGallery
        env:
          PSGALLERY_API_KEY: ${{ secrets.PSGALLERY_API_KEY }}
