checks:
  - ID: NODE001
    Name: Node Readiness and Conditions
    Section: Nodes
    Category: Nodes
    ResourceKind: Node
    Severity: High
    Weight: 8
    Description: Detects nodes that are not in Ready state or reporting other warning conditions.
    FailMessage: One or more nodes are not Ready.
    Recommendation:
      text: Investigate NotReady nodes to avoid workload disruption.
      html: |
        <div class="recommendation-content">
          <ul>
            <li>Use <code>kubectl describe node <name></code> to check conditions and taints.</li>
            <li>Check kubelet and container runtime status.</li>
            <li>Verify cluster networking and node resource pressure.</li>
          </ul>
        </div>
      SpeechBubble:
        - "ü§ñ Checking node readiness and conditions."
        - ""
        - "üìå This check looks for:"
        - "   - Nodes not in 'Ready' state"
        - "   - Warnings in other condition types"
        - ""
        - "‚ö†Ô∏è Nodes not ready may prevent scheduling or disrupt workloads."
    URL: "https://kubernetes.io/docs/concepts/architecture/nodes/"
    Script: |
      param($KubeData)
      $nodes = if ($KubeData?.Nodes) {
        $KubeData.Nodes.items
      } else {
        (kubectl get nodes -o json | ConvertFrom-Json).items
      }
      $results = @()
      $notReadyCount = 0
  
      foreach ($node in $nodes) {
        $name = $node.metadata.name
        $conditions = $node.status.conditions
        $ready = $conditions | Where-Object { $_.type -eq "Ready" }
        $issues = $conditions | Where-Object { $_.type -ne "Ready" -and $_.status -ne "False" }
  
        if ($ready.status -eq "True") {
          $results += [pscustomobject]@{
            Node   = $name
            Status = "‚úÖ Healthy"
            Issues = "None"
          }
        } else {
          $msg = if ($issues) {
            ($issues | ForEach-Object { "$($_.type): $($_.message)" }) -join " | "
          } else {
            "Unknown Issue"
          }
          $results += [pscustomobject]@{
            Node   = $name
            Status = "‚ùå Not Ready"
            Issues = $msg
          }
          $notReadyCount++
        }
      }
  
      return @{
        Items = $results
        IssueCount = $notReadyCount
      }
  - ID: NODE002
    Name: Node Resource Pressure
    Section: Nodes
    Category: Nodes
    ResourceKind: Node
    Severity: Medium
    Weight: 6
    Description: Detects nodes under high CPU, memory, or disk pressure.
    FailMessage: One or more nodes are under high resource usage.
    Recommendation:
      text: Investigate and rebalance workloads on nodes with high resource usage.
      html: |
        <div class="recommendation-content">
          <ul>
            <li>Review node workloads with <code>kubectl top nodes</code>.</li>
            <li>Move resource-hungry pods to less loaded nodes.</li>
            <li>Scale node pool or optimize workloads if necessary.</li>
          </ul>
        </div>
    SpeechBubble:
      - "ü§ñ Checking for high CPU, memory, or disk usage on nodes."
      - ""
      - "üìå This check compares usage against configured thresholds."
      - "   - CPU, memory: from metrics-server"
      - "   - Disk: estimated from node summary"
      - ""
      - "‚ö†Ô∏è High usage may lead to evictions or degraded performance."
    URL: "https://kubernetes.io/docs/tasks/debug/debug-cluster/resource-usage-monitoring/"
    Script: |
      param($KubeData, $Thresholds)
      $nodes = if ($KubeData?.Nodes) {
          $KubeData.Nodes.items
      } else {
          (kubectl get nodes -o json | ConvertFrom-Json).items
      }
      
      $top = if ($KubeData?.TopNodes) {
          $KubeData.TopNodes
      } else {
          kubectl top nodes | Out-String -Stream
      }
      $results = @()
      $issueCount = 0
      
      # Use thresholds from Get-KubeBuddyThresholds
      $cpu_warn = $Thresholds.cpu_warning
      $cpu_crit = $Thresholds.cpu_critical
      $mem_warn = $Thresholds.mem_warning
      $mem_crit = $Thresholds.mem_critical
      $disk_warn = $Thresholds.disk_warning
      $disk_crit = $Thresholds.disk_critical
      
      function Format-CPUStatus {
          param(
              [string]$status,
              [double]$percent,
              [double]$warnThreshold,
              [double]$critThreshold
          )
      
          $tooltipText = switch ($status) {
              "‚úÖ Normal" { "CPU usage under $warnThreshold% ($percent%)" }
              "üü° Warning" { "CPU usage between $warnThreshold% and $critThreshold% ($percent%)" }
              "üî¥ Critical" { "CPU usage above $critThreshold% ($percent%)" }
              default { "Unknown CPU status" }
          }
      
          $color = switch ($status) {
              "‚úÖ Normal" { "#4CAF50" }  # Green
              "üü° Warning" { "#ffa000" }  # Yellow
              "üî¥ Critical" { "#B71C1C" }  # Red
              default { "inherit" }
          }
      
          return "<span class='tooltip' style='color: $color;'>$status<span class='tooltip-text'>$tooltipText</span></span>"
      }
      
      function Format-MemoryStatus {
          param(
              [string]$status,
              [double]$percent,
              [double]$warnThreshold,
              [double]$critThreshold
          )
      
          $tooltipText = switch ($status) {
              "‚úÖ Normal" { "Memory usage under $warnThreshold% ($percent%)" }
              "üü° Warning" { "Memory usage between $warnThreshold% and $critThreshold% ($percent%)" }
              "üî¥ Critical" { "Memory usage above $critThreshold% ($percent%)" }
              default { "Unknown memory status" }
          }
      
          $color = switch ($status) {
              "‚úÖ Normal" { "#4CAF50" }  # Green
              "üü° Warning" { "#ffa000" }  # Yellow
              "üî¥ Critical" { "#B71C1C" }  # Red
              default { "inherit" }
          }
      
          return "<span class='tooltip' style='color: $color;'>$status<span class='tooltip-text'>$tooltipText</span></span>"
      }
      
      function Format-DiskStatus {
          param(
              [string]$status,
              [double]$percent,
              [double]$warnThreshold,
              [double]$critThreshold
          )
      
          $tooltipText = switch ($status) {
              "‚úÖ Normal" { "Disk usage under $warnThreshold% ($percent%)" }
              "üü° Warning" { "Disk usage between $warnThreshold% and $critThreshold% ($percent%)" }
              "üî¥ Critical" { "Disk usage above $critThreshold% ($percent%)" }
              default { "Unknown disk status" }
          }
      
          $color = switch ($status) {
              "‚úÖ Normal" { "#4CAF50" }  # Green
              "üü° Warning" { "#ffa000" }  # Yellow
              "üî¥ Critical" { "#B71C1C" }  # Red
              "‚ö†Ô∏è Unknown" { "#ffa000" }  # Yellow for Unknown
              default { "inherit" }
          }
      
          return "<span class='tooltip' style='color: $color;'>$status<span class='tooltip-text'>$tooltipText</span></span>"
      }
      
      foreach ($node in $nodes) {
          $name = $node.metadata.name
          $cpuAlloc = [int]($node.status.allocatable.cpu -replace "m", "")
          $memAlloc = [math]::Round(([int]($node.status.allocatable.memory -replace "Ki", "")) / 1024)
          $stat = $top | Where-Object { $_ -match "^$name\s" }
      
          # Default values if no stats available
          $cpuUsed = 0
          $cpuPct = 0
          $cpuStatus = "‚úÖ Normal"
          $memUsed = 0
          $memPct = 0
          $memStatus = "‚úÖ Normal"
          $diskPct = "<unknown>"
          $diskStatus = "‚ö†Ô∏è Unknown"
      
          if ($stat) {
              $split = $stat -split "\s+"
              $cpuUsed = [int]($split[1] -replace "m", "")
              $memUsed = [math]::Round([int]($split[3] -replace "Mi", ""))
      
              $cpuPct = [math]::Round(($cpuUsed / $cpuAlloc) * 100, 2)
              $memPct = [math]::Round(($memUsed / $memAlloc) * 100, 2)
      
              # CPU status
              if ($cpuPct -gt $cpu_crit) { $cpuStatus = "üî¥ Critical"; $issueCount++ }
              elseif ($cpuPct -gt $cpu_warn) { $cpuStatus = "üü° Warning"; $issueCount++ }
              else { $cpuStatus = "‚úÖ Normal" }
      
              # Memory status
              if ($memPct -gt $mem_crit) { $memStatus = "üî¥ Critical"; $issueCount++ }
              elseif ($memPct -gt $mem_warn) { $memStatus = "üü° Warning"; $issueCount++ }
              else { $memStatus = "‚úÖ Normal" }
      
              # Disk usage (if available)
              if ($split.Length -ge 5 -and $split[4] -match "^\d+%$") {
                  $diskPct = [int]($split[4] -replace "%", "")
                  if ($diskPct -gt $disk_crit) { $diskStatus = "üî¥ Critical"; $issueCount++ }
                  elseif ($diskPct -gt $disk_warn) { $diskStatus = "üü° Warning"; $issueCount++ }
                  else { $diskStatus = "‚úÖ Normal" }
                  $diskPct = "$diskPct%"
              }
          }
      
          $results += [pscustomobject]@{
              Node          = $name
              "CPU Status"  = (Format-CPUStatus -status $cpuStatus -percent $cpuPct -warnThreshold $cpu_warn -critThreshold $cpu_crit)
              "CPU %"       = "$cpuPct%"
              "CPU Used"    = "$cpuUsed mC"
              "CPU Total"   = "$cpuAlloc mC"
              "Mem Status"  = (Format-MemoryStatus -status $memStatus -percent $memPct -warnThreshold $mem_warn -critThreshold $mem_crit)
              "Mem %"       = "$memPct%"
              "Mem Used"    = "$memUsed Mi"
              "Mem Total"   = "$memAlloc Mi"
              "Disk %"      = $diskPct
              "Disk Status" = (Format-DiskStatus -status $diskStatus -percent ($diskPct -replace '%','') -warnThreshold $disk_warn -critThreshold $disk_crit)
          }
      }
      
      return @{
          Items      = $results
          IssueCount = $issueCount
      }